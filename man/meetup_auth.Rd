% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/meetup_auth.R
\name{meetup_auth}
\alias{meetup_auth}
\title{Authorize \code{meetupr}}
\usage{
meetup_auth(
  token = NULL,
  new_user = FALSE,
  key = getOption("meetupr.consumer_key"),
  secret = getOption("meetupr.consumer_secret"),
  cache = getOption("meetupr.httr_oauth_cache"),
  verbose = TRUE
)
}
\arguments{
\item{token}{optional; an actual token object or the path to a valid token
stored as an \code{.rds} file}

\item{new_user}{logical, defaults to \code{FALSE}. Set to \code{TRUE} if you
want to wipe the slate clean and re-authenticate with the same or different
Google account. This disables the \code{.httr-oauth} file in current
working directory.}

\item{key, secret}{the "Client ID" and "Client secret" for the application;
defaults to the ID and secret built into the \code{googlesheets} package}

\item{cache}{logical indicating if \code{googlesheets} should cache
credentials in the default cache file \code{.httr-oauth}}

\item{verbose}{logical; do you want informative messages?}
}
\description{
Authorize \code{meetupr} via the OAuth API. You will be directed to a web
browser, asked to sign in to your Meetup account, and to grant \code{meetupr}
permission to operate on your behalf. By default, these user credentials are
cached in a file named \code{.httr-oauth} in the current working directory,
from where they can be automatically refreshed, as necessary.
}
\details{
Most users, most of the time, do not need to call this function explicitly --
it will be triggered by the first action that requires authorization. Even
when called, the default arguments will often suffice. However, when
necessary, this function allows the user to

\itemize{
\item TODO: force the creation of a new token
\item TODO: retrieve current token as an object, for possible storage to an
\code{.rds} file
\item TODO: read the token from an object or from an \code{.rds} file
\item TODO: provide your own app key and secret -- this requires setting up
a new project in \href{https://console.developers.google.com}{Google Developers Console}
\item TODO: prevent caching of credentials in \code{.httr-oauth}
}

In a direct call to \code{meetup_auth}, the user can provide the token, app
key and secret explicitly and can dictate whether interactively-obtained
credentials will be cached in \code{.httr_oauth}. If unspecified, these
arguments are controlled via options, which, if undefined at the time
\code{meetupr} is loaded, are defined like so:

\describe{
\item{key}{Set to option \code{meetupr.consumer_key}, which defaults to a
consumer key that ships with the package}
\item{secret}{Set to option \code{meetupr.consumer_secret}, which defaults to
a consumer secret that ships with the package}
\item{cache}{Set to option \code{meetupr.httr_oauth_cache}, which defaults
to \code{TRUE}}
}

To override these defaults in persistent way, predefine one or more of them
with lines like this in a \code{.Rprofile} file:
\preformatted{
options(meetupr.consumer_key = "FOO",
        meetupr.consumer_secret = "BAR",
        meetupr.httr_oauth_cache = FALSE)
}
See \code{\link[base]{Startup}} for possible locations for this file and the
implications thereof.

More detail is available from
\href{https://www.meetup.com/meetup_api/auth/#oauth2-resources}{Authenticating
with the Meetup API}.
}
\examples{
\dontrun{
## load/refresh existing credentials, if available
## otherwise, go to browser for authentication and authorization
gs_auth()

## store token in an object and then to file
ttt <- gs_auth()
saveRDS(ttt, "ttt.rds")

## load a pre-existing token
gs_auth(token = ttt)       # from an object
gs_auth(token = "ttt.rds") # from .rds file
}
}
\seealso{
Other auth functions: 
\code{\link{meetup_deauth}()},
\code{\link{meetup_token}()}
}
\concept{auth functions}
