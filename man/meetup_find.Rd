% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/meetup_find.R
\name{find_groups}
\alias{find_groups}
\alias{find_topics}
\title{Find meetup information by searching}
\usage{
find_groups(
  text = NULL,
  topic_id = NULL,
  radius = "global",
  fields = NULL,
  verbose = getOption("meetupr.verbose", rlang::is_interactive())
)

find_topics(
  text = NULL,
  verbose = getOption("meetupr.verbose", rlang::is_interactive()),
  ...
)
}
\arguments{
\item{text}{Character. Raw full text search query.}

\item{topic_id}{Integer. Meetup.com topic ID.}

\item{radius}{can be either "global" (default) or distance in miles in the
range 0-100.}

\item{fields}{Character. Optional fields that are not returned by default.}

\item{verbose}{logical; do you want informative messages? \code{TRUE} by default in
interactive sessions. Can be toggled by the \code{meetupr.verbose} option.}

\item{...}{Other parameters to send to the API query}
}
\value{
A tibble with relevant meetup information
}
\description{
These functions search for relevant meetup information
based. These are usually good to use to find all groups
that fall within a certain topic or that have a specific string
in their name.
}
\details{
\describe{
\item{find_topics}{Find meetup topic IDs matching a text search query}
\item{find_groups}{Find meetup groups by searching group names}
}
}
\examples{
\dontrun{
groups <- find_groups(text = "r-ladies")
groups <- find_groups(topic_id = 1513883)
groups <- find_groups(text = "r-ladies", fields = "past_event_count,
 upcoming_event_count")
past_event_counts <- purrr::map_dbl(groups$resource, "past_event_count",
 .default = 0)
upcoming_event_counts <- purrr::map_dbl(groups$resource, "upcoming_event_count",
 .default = 0)

topics <- find_topics(text = "R-Ladies")
# Note that R-Ladies has topic id 1513883
groups <- find_groups(topic_id = 1513883)
}
}
\references{
\url{https://www.meetup.com/meetup_api/docs/find/groups/}
\url{https://www.meetup.com/meetup_api/docs/find/topics/}
}
